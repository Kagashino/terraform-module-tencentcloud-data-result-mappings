#!/usr/bin/env node

let process = require("child_process")
let fs = require("fs")

let TCPrefixRE = /^tencentcloud_/
let DescEachElemRE = / (and its )?(Each|every) element.+$/

process.exec("terraform providers schema -json", (err, res) => {
  if (err) return console.error(err)
  let fields = getDataSourceFieldsFromSchema(res)
  generateVariableFile(fields)
  generateDataTypesMarkdown(fields)
})

function getDataSourceFieldsFromSchema(res) {
  let result = JSON.parse(res)
  let dataSourceSchemas = result
      ?.["provider_schemas"]
      ?.["registry.terraform.io/tencentcloudstack/tencentcloud"]
      ?.["data_source_schemas"]
      ?? {}

  let dataSources = createDataSource()
  for (let name of Object.keys(dataSourceSchemas)) {
    let ds = dataSourceSchemas[name]
    for (let attr of Object.keys(ds.block.attributes)) {
      let attrSchema = ds.block.attributes[attr]
      let schemaType = attrSchema?.type?.[0]
      let description = (attrSchema?.description ?? "").replace(DescEachElemRE, "")

      if (schemaType !== "list" || !attrSchema?.computed) {
        continue
      }
      dataSources.add(name, {
        name: attr,
        description,
      })
    }
  }
  return dataSources
  //  provider_schemas[].data_source_schemas.tencentcloud_address_template_groups.block.attributes.group_list
}

function generateVariableFile(dataSources) {
  let outputs = Object.keys(dataSources).map(f => {
    let field = f.replace(TCPrefixRE, "")
    return dataSources[f].map((item, index) => {
      let outputName = index ? `${field}_${index}` : field
      let block = `
# ${item.description}
output "${outputName}" {
  value = "${item.name}"
}
`
      return block
    })

  })
      .filter(Boolean)
      .flat(2)

  let lines = [
      "# TencentCloud DataSource result fields\n",
      "# This file was auto generated, DO NOT EDIT!\n",
      ...outputs,
  ]

  fs.writeFileSync("outputs.tf", lines.join(""))
}

function generateDataTypesMarkdown(dataSources) {
  let templates = `# Outputs

> WARNING: This table is auto-generated by codegen.sh, DO NOT Edit manually!

|name|key|description|
|:---:|:---:|----|
`

  let outputs = Object.keys(dataSources).map(f => {
    let field = f.replace(TCPrefixRE, "")
    return dataSources[f].map((item, index) => {
      let outputName = index ? `${field}_${index}` : field
      return `| ${outputName} | \`${item.name}\` | ${item.description} |\n`
    })

  })
      .filter(Boolean)
      .flat(2)

  let lines = [
      templates,
      ...outputs
  ]

  fs.writeFileSync("./outputs.md", lines.join(""))
}

function createDataSource() {
  return Object.create({
    add(name, item) {
      if (!this[name]) {
        this[name] = []
      }
      this[name].push(item)
    },
  })
}